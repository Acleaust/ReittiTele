//
//  Pys√§kkibot
//  Created by @AInkilainen & @larma (Telegram usernames)
//

//NPM
const TeleBot = require('telebot');
const { request } = require('graphql-request')
var jp = require('jsonpath');
var TimeFormat = require('hh-mm-ss')
var limit = require('limit-string-length');
require('console-stamp')(console, 'HH:MM:ss'); //Aikaleimat logiin

//BotToken
const bot = new TeleBot({
    token: 'TOKEN',
    usePlugins: ['askUser']
});

//Muuttujia
const digiAPI = 'http://api.digitransit.fi/routing/v1/routers/hsl/index/graphql';
const vaaravastaus = '{"stops":[]}'
const LOCvaaravastaus = '{"places":{"edges":[]}}'
var hetki = "Hetkinen..."
var hetki2 = "Haetaan aikatauluja..."
//-----------------------------------------------

// Logaa jokaisen sis√§√§ntulevan viestin consoliin
bot.on('text', function (msg) {
    console.log(`[text] ${msg.chat.id} ${msg.text}`);
});

//---------- Komentoja ----------

// /start
bot.on('/start', (msg) => {
    let replyMarkup = bot.keyboard([
        [bot.button('/hae'), bot.button('location', 'Sijaintisi mukaan üìç')],
        ['/hide']
    ], { resize: true });
    bot.sendMessage(msg.from.id, `Hei, ${msg.from.first_name}! Tervetuloa k√§ytt√§m√§√§n pys√§kkibottia!\n\nVoit aloittaa k√§yt√∂n kirjoittamalla /hae ja pys√§kin nimen tai koodin.\n\nVoit vaihtoehtoisesti my√∂s l√§hett√§√§ sijaintisi ja saada l√§hist√∂lt√§si seuraavat l√§hd√∂t!\n\nJos tarvitset lis√§√§ apua tee /help! üòÑ`, { replyMarkup }); //Vastaa kun k√§ytt√§j√§ k√§ytt√§√§ /start komentoa
    return console.log("[info] Start viesti l√§hetetty!")
});

// /help
bot.on('/help', (msg) => {
    bot.sendMessage(msg.from.id, `${msg.from.first_name} tarvitsetko apua? T√§ss√§ lis√§ohjeita:\n\nVoi etsi√§ pys√§kkej√§ kirjoittamalla "/hae" ja pys√§kin nimen.\nEsim. "/hae keilaniemi"\n\nVoit my√∂s l√§hett√§√§ sijaintisi ja saad√§ l√§hist√∂lt√§ l√§hd√∂t. Jos l√§hell√§si ei ole pys√§kkej√§, kokeile l√§hett√§√§ sijainti pys√§kin l√§helt√§.\n\nJos l√∂yd√§t bugin voit reportoida sen tekem√§ll√§ /bugi\n\nMukavaa matkaa! üòä`); //Vastaa kun k√§ytt√§j√§ k√§ytt√§√§ /start komentoa
    return console.log("[info] Help viesti l√§hetetty!")
});

// /bugi
bot.on('/bugi', (msg) => {
    bot.sendMessage(msg.from.id, `${msg.from.first_name}, l√∂ysitk√∂ bugin? Jos l√∂ysit bugin voit reportoida sen t√§nne: https://goo.gl/forms/o1dIISSchWKluJ8A2\n\nVoit my√∂s ottaa yhteytt√§ kehitt√§j√§√§n laittamalla viesti√§ @ainkilainen\n\nMukavaa matkaa! üòä`); //Vastaa kun k√§ytt√§j√§ k√§ytt√§√§ /start komentoa
    return console.log("[info] Help viesti l√§hetetty!")
});

// /hide (piilottaa n√§pp√§imist√∂n)
bot.on('/hide', msg => {
    return bot.sendMessage(
        msg.from.id, 'Vaihtoehdot piilotettu.', { replyMarkup: 'hide' }
    );
});

//Stikkeriin vastaus
bot.on('sticker', (msg) => {
    //L√§hett√§√§ stikkerin 1.webp vastauksena
    msg.reply.sticker('img/1.webp', { asReply: true });
    return console.log(`[sticker] ${msg.chat.id}`)
});

// /menu
bot.on('/menu', msg => {
    //Rakentaa n√§pp√§imit√∂n
    let replyMarkup = bot.keyboard([
        [bot.button('/hae'), bot.button('location', 'Sijaintisi mukaan üìç')],
        ['/hide']
    ], { resize: true });
    //L√§hett√§√§ viestin
    bot.sendMessage(msg.from.id, 'Valitse toiminto.', { replyMarkup });
    return console.log("[info] Menu avattu!")
});

//Adminpaneeli
bot.on('/admin', (msg) => {
    if (msg.from.id == 81023943 || msg.from.id == 86734737) {
        console.log("[info] Admin tunnistettu")
        let replyMarkup = bot.keyboard([
            ['/adminhairio'],
            ['/hide']
        ], { resize: true });
        return bot.sendMessage(msg.from.id, `Admin menu:`, { replyMarkup })
    } else {
        console.log("[info] Adminia ei tunnistettu")
    }
});

//H√§iri√∂n lis√§√§minen
bot.on('/adminhairio', (msg) => {
    //Jos viesti vain vain admineilta
    if (msg.from.id == 81023943 || msg.from.id == 86734737) {
        console.log("[info] Admin tunnistettu")
        //Jos hetki on Hetkinen... - lis√§√§ h√§iri√∂n
        if (hetki == "Hetkinen...") {
            //Vaihtaa muuttijien viestin
            hetki = "Hetkinen...\nH√§iri√∂ voi hidastaa hakua."
            hetki2 = "Haetaan aikatauluja...\nH√§iri√∂ voi hidastaa hakua."
            //L√§hett√§√§ admineille viestin
            bot.sendMessage(81023943, `H√§iri√∂ lis√§tty.`);
            bot.sendMessage(86734737, `H√§iri√∂ lis√§tty.`);
            return console.log("[info] Admin - H√§iri√∂ viesti lis√§tty!")
        } else {
            //Vaihtaa muuttijien viestin
            hetki = "Hetkinen..."
            hetki2 = "Haetaan aikatauluja..."
            //L√§hett√§√§ admineille viestin
            bot.sendMessage(81023943, `H√§iri√∂ poistettu.`);
            bot.sendMessage(86734737, `H√§iri√∂ poistettu.`);
            return console.log("[info] Admin - H√§iri√∂ viesti poistettu!")
        }
    } else {
        console.log("[info] Adminia ei tunnistettu")
    }
});

//---------- /hae ----------
bot.on('/hae', msg => {
    let text = msg.text;

    //Jos tkesti on pelk√§st√§√§n /hae, ohjelma kysyy pys√§kin nime√§ tai koodia erikseen
    if (text == '/hae') {
        console.log("[info] Kysytty pys√§kki√§.")
        return bot.sendMessage(msg.from.id, 'Anna pys√§kin nimi tai koodi üòÑ', { replyMarkup: 'hide', ask: 'pysakkinimi' }).then(re => { })
    } else { //Muuten etsii suoraan. Heitt√§√§ viestin hetkinen ja menee pys√§kkihaku funktioon
        console.log("[info] Hetkinen...")
        return bot.sendMessage(msg.from.id, `${hetki}`).then(re => {
            //Poistaa "/hae " tekstin
            text = text.replace('/hae ', '');
            //Kutuu funktion
            pysakkihaku(msg.from.id, re.message_id, text);
        })
    }
});

//---------- /linja ----------
bot.on('/linja', msg => {
    let text = msg.text;

    //Jos saadaan vain /linja, kysyt√§√§n ask linjatunnuksella linjaa
    if (text == '/linja') {
        console.log("[info] Kysytty linjaa.")
        return bot.sendMessage(msg.from.id, 'Anna linjan tunnus üòÑ', { replyMarkup: 'hide', ask: 'linjatunnus' }).then(re => { })
    } else { //Muuten menn√§√§n suoraan maaranpaat funktioon
        console.log("[info] Hetkinen...")
        return bot.sendMessage(msg.from.id, `${hetki}`).then(re => {
            //Poistaa "/linja " tekstin
            text = text.replace('/linja ', '');
            //Kutuu funktion
            maaranpaat(msg.from.id, re.message_id, text);
        })
    }
});

//---------- Kysymykset ----------

//Pys√§kkinimi kysymys
bot.on('ask.pysakkinimi', msg => {
    let text = msg.text;

    //Komennot jotka ei tee pys√∂kkihakua
    if (text == "/start" || text == undefined || text.includes("/hae") || text == "/help" || text == "/linja" || text == "/menu" || text.includes("/admin")) {
        //Keskeytet√§√§n kysymys
    } else {
        console.log("[info] Hetkinen...")
        //L√§hetet√§√§n hetkinen
        return bot.sendMessage(msg.from.id, `${hetki}`).then(re => {
            //Funktioon siirtyminen
            pysakkihaku(msg.from.id, re.message_id, text);
        })
    }
});

//Pys√§kkivalinta kysymys
bot.on('ask.askpysakkivalinta', msg => {
    const valinta = msg.text;

    //Komennot jotka ei tee pys√∂kkihakua
    if (valinta == "/start" || valinta == "/hide" || valinta == undefined || valinta.includes("/hae") || valinta == "/help" || valinta == "/linja" || valinta == "/menu" || valinta.includes("/admin")) {
        //Keskeytet√§√§n kysymys
    } else {
        //Jos sis√§lt√§√§ "/" menn√§√§n suoraan valintafunktioon
        if (valinta.includes("/")) {

            console.log("[info] Haetaan aikatauluja...")
            return bot.sendMessage(msg.from.id, `${hetki2}`).then(re => {

                valintafunktio(msg.from.id, re.message_id, valinta);
            })
        } else { //Jos ei si√§ll√§ "/" niin kysyt√§√§n uudelleen
            bot.sendMessage(msg.from.id, ``, { ask: 'askpysakkivalinta' }).catch(error => console.log('[info] Ei pys√§kin koodia!'));
            //Do nothing
        }
    }
});

bot.on('ask.linjatunnus', msg => {
    const valinta = msg.text;

    // T√§h√§n komennot joita jotka ei tee hakua
    if (valinta == "/start" || valinta == "/hide" || valinta == undefined || valinta.includes("/hae") || valinta == "/help" || valinta == "/menu" || valinta.includes("/admin")) {
        //√Ñl√§ tee mit√§√§n
    } else {

        console.log("[info] Haetaan m√§√§r√§np√§√§t...")
        return bot.sendMessage(msg.from.id, 'Haetaan m√§√§r√§np√§it√§...').then(re => {

            maaranpaat(msg.from.id, re.message_id, valinta);
        })
    }
});

//---------- Funktiot ----------

//Pys√§kkihaku - /HAE
function pysakkihaku(chatId, messageId, viesti) {
    //Hakulause
    const query = `{
	    stops(name: "${viesti}") {
        gtfsId
        name
        code
        }
        }`

    //Hakulauseen suoritus
    return request(digiAPI, query)
        .then(function (data) {
            //Data on vastaus GraphQL kyselyst√§
            //Muutuja vastaus stringifaijattu data
            var vastaus = JSON.stringify(data);
            //Jos pys√§kin nimell√§ ei l√∂ydy pys√§kki√§
            if (vastaus == vaaravastaus) {
                //L√§hett√§√§ tyhj√§n viestin joka tekee kysymyksen
                bot.sendMessage(chatId, ``, { ask: 'pysakkinimi' }).catch(error => console.log('[info] Pys√§kkej√§ ei l√∂ytynyt!'));
                //Editoi viestin
                return bot.editMessageText({ chatId, messageId }, `Pys√§kki√§ "${viesti}" ei valitettavasti l√∂ydy.\nKokeile uudestaan üòÑ`, { ask: 'pysakkinimi' });
            } else {
                //Hakee py√§kit ja koodit niille
                var pysakit = jp.query(data, '$..name')
                var koodit = jp.query(data, '$..code')
                //Erittelee pys√§kit ja yhdist√§√§ koodit
                for (i = 0; i < pysakit.length; i += 1) {
                    koodi = koodit[i];
                    //Yhdist√§√§ muuttujaan valinnat
                    var pk = "/" + koodi + " " + pysakit[i] + " - " + koodit[i] + "\n"
                    //Tallentaa toiseen muuttujaan kaikki pk muuttujat
                    //Jos tehd√§√§n ensinm√§inen valinta
                    if (pysakkivalinta == null) {
                        //Viesti
                        pysakkivalinta = pk;
                        //Luodaan tyhj√§ n√§pp√§imist√∂
                        var nappaimisto = []
                        nappaimisto.push("/" + koodi)
                    } else {
                        //Viesti
                        pysakkivalinta = pysakkivalinta += pk;
                        //N√§pp√§imist√∂
                        nappaimisto.push("/" + koodi)
                    }
                }
                //N√§pp√§imist√∂ jaetaan kahteen riviin
                nappaimisto2 = nappaimisto.splice(0, Math.ceil(nappaimisto.length / 2));
                //N√§pp√§imist√∂n alaosa
                var nappaimistoAla1 = [bot.button('/hae'), bot.button('location', 'Sijaintisi mukaan üìç')]
                var nappaimistoAla2 = ['/hide']
                //Rakennetaan nappaimisto
                let replyMarkup = bot.keyboard([nappaimisto2, nappaimisto, nappaimistoAla1, nappaimistoAla2], { resize: true });

                //Returnaa pys√§kit tekstin√§ ja tyhjent√§√§ pys√§kkivalinnan
                console.log("[info] Valinnat l√§hetetty!")
                bot.editMessageText({ chatId, messageId }, `Etsit pys√§kki√§ "${viesti}".\nValitse alla olevista vaihtoehdoita oikea pys√§kki!\n\n${pysakkivalinta}`)
                return bot.sendMessage(chatId, `Voit valita pys√§kin my√∂s n√§pp√§imist√∂st√§! üòâ`, { replyMarkup, ask: 'askpysakkivalinta' })//.catch(error => console.log('[info] Valinnat l√§hetetty!'));
                //return bot.sendMessage(chatId , `Etsit pys√§kki√§ "${viesti}".\nValitse alla olevista vaihtoehdoita oikea pys√§kki!\n\n${pysakkivalinta}`, { ask: 'askpysakkivalinta' })
                var pysakkivalinta = undefined;
                var nappaimisto = undefined;
            }
        }
        )
        //Jos errori koko h√∂sk√§ss√§ konsoliin errorviesti. Valitettavasti ihan mik√§ vaa error on GraphQL error mut ei voi mit√§√§
        .catch(err => {
            console.log("[ERROR] GraphQL error")
            return bot.editMessageText({ chatId, messageId }, `Ongelma pyynn√∂ss√§. Kokeile uudestaan!`)
        })
};

//Valinta - /HAE -> /xxxx (pys√§kin tunnus)
function valintafunktio(chatId, messageId, valinta) {
    //Jos pelk√§st√§√§n kauttaviiva
    if (valinta == '/') {
        return bot.editMessageText({ chatId, messageId }, `"/" ei ole pys√§kki. Kokeile uudestaan!`, { ask: 'askpysakkivalinta' });
    }
    //Poistaa "/" merkin ja tyhj√§n v√§lin
    valintavastaus = valinta.replace('/', '');
    if (valintavastaus.includes(' ')) {
        valintavastaus = valintavastaus.replace(' ', '')
    }
    //Query
    const querygetstoptimesforstops = `{
            stops(name: "${valintavastaus}") {
              name
              code
              stoptimesWithoutPatterns (numberOfDepartures: 10) {
                realtimeDeparture
                headsign
                trip {
                  pattern {
                    route {
                      shortName
                    }
                  }
                }
              }
            }
          }`

    //Hakulauseen suoritus
    return request(digiAPI, querygetstoptimesforstops)
        .then(function (data) {
            //Datan haku queryn vastauksesta
            var stopshaku = jp.query(data, '$..stops')
            var stoptimeshaku = jp.query(stopshaku, '$..stoptimesWithoutPatterns')
            var realtimehaku = jp.query(data, '$..realtimeDeparture')

            //Eritell√§√§n vastaukset
            for (i = 0; i < realtimehaku.length; i += 1) {
                var stoptimesif = JSON.stringify(stoptimeshaku[i])
                var realtime = realtimehaku[i]
                //Jos ei l√§ht√∂√§
                if (stoptimesif == "[]") {
                    //Do nothing
                } else {
                    //Hakee datasta nimen ja koodin
                    var pysakki = jp.query(stopshaku, '$..name')
                    var koodi = jp.query(stopshaku, '$..code')

                    //Hakee ajan ja muuttaa sen numeroksi
                    var realtimeNUM = Number(realtime)
                    //Muuntaa ajan sekunneista minuutiksi
                    var departuretime = TimeFormat.fromS(realtimeNUM, 'hh:mm');
                    //Limitoi sekunnit pois
                    var departuretimeshort = limit(departuretime, 5)
                    //Kellonaikojen korjaus
                    if (realtimeNUM > 86400) {
                        var departuretimeshort = departuretimeshort.replace('24:', '00:')
                    } if (realtimeNUM > 90000) {
                        var departuretimeshort = departuretimeshort.replace('25:', '01:')
                    } if (realtimeNUM > 93600) {
                        var departuretimeshort = departuretimeshort.replace('26:', '02:')
                    } if (realtimeNUM > 97200) {
                        var departuretimeshort = departuretimeshort.replace('27:', '03:')
                    } if (realtimeNUM > 100800) {
                        var departuretimeshort = departuretimeshort.replace('28:', '04:')
                    }
                    //Hakee linjan numeron tai kirjaimen
                    var linjatunnus = jp.query(data, '$..shortName')
                    //Hakee m√§√§r√§np√§√§n
                    var maaranpaa = jp.query(stopshaku, '$..headsign')
                    //Jos m√§√§r√§np√§√§ on tyhj√§
                    if (maaranpaa[i] == null) {
                        //√Ñl√§ tee mit√§√§n
                    } else {
                        //Yhdist√§√§ ajan, numeron/kirjaimen ja m√§√§r√§np√§√§n
                        var yksittainenlahto = departuretimeshort + "  " + linjatunnus[i] + " " + maaranpaa[i] + "\n";

                        //Yhdist√§√§ yksitt√§iset l√§hd√∂t viesti√§ varten
                        if (lahdot == null) {
                            lahdot = yksittainenlahto;
                        } else {
                            lahdot = lahdot + yksittainenlahto;
                        }
                    }
                }
            }
            //Viestin l√§hetys
            //Jos ei l√§ht√∂j√§ pys√§kilt√§
            if (lahdot == undefined) {
                bot.sendMessage(chatId, ``, { ask: 'askpysakkivalinta' }).catch(error => console.log('[info] Ei l√§ht√∂j√§.'));
                return bot.editMessageText({ chatId, messageId }, `Ei l√§ht√∂j√§ pys√§kilt√§.`, { ask: 'askpysakkivalinta' });
                var lahdot = undefined;
            } else { //Muuten l√§hett√§√§ viestin ja kysyy pys√§kkivalintaa
                bot.sendMessage(chatId, ``, { ask: 'askpysakkivalinta' }).catch(error => console.log('[info] Vastaus l√§hetetty!'));
                return bot.editMessageText({ chatId, messageId }, `L√§hd√∂t pys√§kilt√§ ${pysakki} - ${koodi}:\n\n${lahdot}`, { ask: 'askpysakkivalinta' });
                var lahdot = undefined;
            }
        })
        //Jos errori koko h√∂sk√§ss√§ konsoliin errorviesti. Valitettavasti ihan mik√§ vaa error on GraphQL error mut ei voi mit√§√§
        .catch(err => {
            console.log("[ERROR] GraphQL error")
            console.log(err)
            return bot.editMessageText({ chatId, messageId }, `Ongelma valinnassa. Kokeile uudestaan!`)
        })
}

//M√§√§r√§np√§√§t - /LINJA
function maaranpaat(chatId, messageId, viesti) {

    //Hakulause
    const query = `{
        routes(name: "${viesti}") {
          id
          shortName
          longName
          desc
          patterns {
            id
            headsign
          }
        }
      }`

    return request(digiAPI, query)
        .then(function (data) {
            //Datan haku kyselyn vastauksesta
            var desc = jp.query(data, '$..desc')
            var shortNames = jp.query(data, '$..shortName')
            var patterns = jp.query(data, '$..patterns')
            
            //Eritell√§√§n kaikki 
            for (i = 0; i < desc.length; i += 1) {
                //Linjatunnus ja pattterni
                var linjatunnus = shortNames[i];
                var pattern = patterns[i];

                //Vain haettu tunnus kelpaa
                if (linjatunnus == viesti) {
                    //Hakee patternista ma√§√§r√§np√§√§t
                    var maaranpaat = jp.query(pattern, '$..headsign')
                    var iideeahaku = jp.query(pattern, '$..id')
                    //Jokaiselle m√§√§r√§np√§√§lle
                    for (i = 0; i < maaranpaat.length; i += 1) {
                        var maaranpaa = maaranpaat[i]
                        var iidee = iideeahaku[i]
                        //M√§√§rn√§np√§√§t siististi muuttujaan viesti√§ varten
                        var maaranpaalista
                        if (maaranpaalista == undefined) {
                            maaranpaalista = maaranpaa + "\n"
                        } else {
                            maaranpaalista = maaranpaalista + maaranpaa
                        }
                    }
                } else {
                    //DO NOTHING
                }
            }
            return bot.editMessageText({ chatId, messageId }, `M√§√§r√§np√§√§t linjalle ${linjatunnus}:\n\n${maaranpaalista}`);
        })
}

//---------- Location ----------
bot.on(['location'], (msg, self) => {
    let id = msg.from.id;
    let sijainti = msg.location;
    //Hakee erikseen lat ja lon
    var latitude = jp.query(sijainti, '$..latitude')
    var longitude = jp.query(sijainti, '$..longitude')

    console.log(`[location] ${msg.chat.id}`)
    //Query
    const querygetlocation = `{
        places: nearest(
        lat: ${latitude},
        lon: ${longitude},
        maxDistance: 500, 
        maxResults: 20,
        first:20,
        filterByPlaceTypes: DEPARTURE_ROW
          ) {
        edges {
          node {
            distance
            place {
              ... on DepartureRow {
                stoptimes(timeRange: 7200, numberOfDepartures: 1, startTime: 0) {
                  pickupType
                  realtimeDeparture
                  headsign
                  trip {
                    pattern {
                      route {
                        shortName
                      }
                    }
                  }
                  stop {
                    name
                    code
                    platformCode
                  }
                }
              }
            }
          }
        }
      }
    }`

    //Hakulauseen suoritus
    return request(digiAPI, querygetlocation)
        .then(function (data) {
            var vastaus = JSON.stringify(data);
            if (vastaus == LOCvaaravastaus) {
                bot.sendMessage(id, `L√§helt√§si ei valitettavastai l√∂ydy pys√§kkej√§.`);
                return console.log("[info] Ei pys√§kkej√§ l√§hell√§.")
            } else {
                //Datan haku queryn vastauksesta
                var nodehaku = jp.query(data, '$..node')
                var stoptimes = jp.query(nodehaku, '$..stoptimes')

                //Erotellaan l√§hd√∂t toisitaan
                for (i = 0; i < nodehaku.length; i += 1) {
                    var stoptimesif = JSON.stringify(stoptimes[i])
                    var stoptimes2 = stoptimes[i]
                    var node2 = nodehaku[i]

                    if (stoptimesif == "[]") {
                        //console.log("Hyp√§tty yli!")
                    } else {
                        //Hakee ajan ja muuttaa sen numeroksi
                        var realtime = jp.query(stoptimes2, '$..realtimeDeparture')
                        var realtimeNUM = Number(realtime)
                        //Muuttaa sekunnit tunneiksi ja minuuteiksi
                        var departuretime = TimeFormat.fromS(realtimeNUM, 'hh:mm');
                        //Positaa sekunnit
                        var departuretimeshort = limit(departuretime, 5)
                        //Tuntien korjaus
                        if (realtimeNUM > 86400) {
                            var departuretimeshort = departuretimeshort.replace('24:', '00:')
                        } if (realtimeNUM > 90000) {
                            var departuretimeshort = departuretimeshort.replace('25:', '01:')
                        } if (realtimeNUM > 93600) {
                            var departuretimeshort = departuretimeshort.replace('26:', '02:')
                        } if (realtimeNUM > 97200) {
                            var departuretimeshort = departuretimeshort.replace('27:', '03:')
                        } if (realtimeNUM > 100800) {
                            var departuretimeshort = departuretimeshort.replace('28:', '04:')
                        }
                        //Hakee linjan numeron tai kirjaimen
                        var shortname = jp.query(node2, '$..shortName')
                        //Hakee M√§√§r√§np√§√§n
                        var headsign = jp.query(stoptimes2, '$..headsign')
                        //Hakee pys√§kin
                        var pysakkikoodi = jp.query(stoptimes2, '$..code')
                        //Yhdist√§√§ 
                        var yksittainenlahto = departuretimeshort + "  " + shortname + " " + headsign + " - " + pysakkikoodi + "\n";
                        if (lahdot == null) {
                            lahdot = yksittainenlahto;
                        } else {
                            lahdot = lahdot + yksittainenlahto;
                        }
                    }
                }
                //Viestin l√§hetys
                //Jos ei l√§ht√∂j√§ l√§hell√§
                if (lahdot == undefined) {
                    bot.sendMessage(msg.from.id, `Ei l√§ht√∂j√§ l√§hist√∂ll√§`);
                    return console.log("[info] Ei l√§ht√∂j√§ viesti l√§hetetty.")
                    var lahdot = undefined;
                } else { //Muuten l√§hett√§√§ l√§hd√∂t
                    bot.sendMessage(msg.from.id, `L√§hd√∂t l√§hell√§si:\n\n${lahdot}`);
                    return console.log("[info] Location viesti l√§hetetty!")
                    var lahdot = undefined;
                }
            }
        })
});

//Sovelluksen py√∂ritys. √Ñl√§ poista!!
bot.start();